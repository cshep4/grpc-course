// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: todo.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/cshep4/grpc-course/09-todo-service/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TodoServiceName is the fully-qualified name of the TodoService service.
	TodoServiceName = "todo.TodoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TodoServiceAddTaskProcedure is the fully-qualified name of the TodoService's AddTask RPC.
	TodoServiceAddTaskProcedure = "/todo.TodoService/AddTask"
	// TodoServiceCompleteTaskProcedure is the fully-qualified name of the TodoService's CompleteTask
	// RPC.
	TodoServiceCompleteTaskProcedure = "/todo.TodoService/CompleteTask"
	// TodoServiceListTasksProcedure is the fully-qualified name of the TodoService's ListTasks RPC.
	TodoServiceListTasksProcedure = "/todo.TodoService/ListTasks"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	todoServiceServiceDescriptor            = proto.File_todo_proto.Services().ByName("TodoService")
	todoServiceAddTaskMethodDescriptor      = todoServiceServiceDescriptor.Methods().ByName("AddTask")
	todoServiceCompleteTaskMethodDescriptor = todoServiceServiceDescriptor.Methods().ByName("CompleteTask")
	todoServiceListTasksMethodDescriptor    = todoServiceServiceDescriptor.Methods().ByName("ListTasks")
)

// TodoServiceClient is a client for the todo.TodoService service.
type TodoServiceClient interface {
	AddTask(context.Context, *connect.Request[proto.AddTaskRequest]) (*connect.Response[proto.AddTaskResponse], error)
	CompleteTask(context.Context, *connect.Request[proto.CompleteTaskRequest]) (*connect.Response[proto.CompleteTaskResponse], error)
	ListTasks(context.Context, *connect.Request[proto.ListTasksRequest]) (*connect.Response[proto.ListTasksResponse], error)
}

// NewTodoServiceClient constructs a client for the todo.TodoService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTodoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TodoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &todoServiceClient{
		addTask: connect.NewClient[proto.AddTaskRequest, proto.AddTaskResponse](
			httpClient,
			baseURL+TodoServiceAddTaskProcedure,
			connect.WithSchema(todoServiceAddTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		completeTask: connect.NewClient[proto.CompleteTaskRequest, proto.CompleteTaskResponse](
			httpClient,
			baseURL+TodoServiceCompleteTaskProcedure,
			connect.WithSchema(todoServiceCompleteTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTasks: connect.NewClient[proto.ListTasksRequest, proto.ListTasksResponse](
			httpClient,
			baseURL+TodoServiceListTasksProcedure,
			connect.WithSchema(todoServiceListTasksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// todoServiceClient implements TodoServiceClient.
type todoServiceClient struct {
	addTask      *connect.Client[proto.AddTaskRequest, proto.AddTaskResponse]
	completeTask *connect.Client[proto.CompleteTaskRequest, proto.CompleteTaskResponse]
	listTasks    *connect.Client[proto.ListTasksRequest, proto.ListTasksResponse]
}

// AddTask calls todo.TodoService.AddTask.
func (c *todoServiceClient) AddTask(ctx context.Context, req *connect.Request[proto.AddTaskRequest]) (*connect.Response[proto.AddTaskResponse], error) {
	return c.addTask.CallUnary(ctx, req)
}

// CompleteTask calls todo.TodoService.CompleteTask.
func (c *todoServiceClient) CompleteTask(ctx context.Context, req *connect.Request[proto.CompleteTaskRequest]) (*connect.Response[proto.CompleteTaskResponse], error) {
	return c.completeTask.CallUnary(ctx, req)
}

// ListTasks calls todo.TodoService.ListTasks.
func (c *todoServiceClient) ListTasks(ctx context.Context, req *connect.Request[proto.ListTasksRequest]) (*connect.Response[proto.ListTasksResponse], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// TodoServiceHandler is an implementation of the todo.TodoService service.
type TodoServiceHandler interface {
	AddTask(context.Context, *connect.Request[proto.AddTaskRequest]) (*connect.Response[proto.AddTaskResponse], error)
	CompleteTask(context.Context, *connect.Request[proto.CompleteTaskRequest]) (*connect.Response[proto.CompleteTaskResponse], error)
	ListTasks(context.Context, *connect.Request[proto.ListTasksRequest]) (*connect.Response[proto.ListTasksResponse], error)
}

// NewTodoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTodoServiceHandler(svc TodoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	todoServiceAddTaskHandler := connect.NewUnaryHandler(
		TodoServiceAddTaskProcedure,
		svc.AddTask,
		connect.WithSchema(todoServiceAddTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceCompleteTaskHandler := connect.NewUnaryHandler(
		TodoServiceCompleteTaskProcedure,
		svc.CompleteTask,
		connect.WithSchema(todoServiceCompleteTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceListTasksHandler := connect.NewUnaryHandler(
		TodoServiceListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(todoServiceListTasksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/todo.TodoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TodoServiceAddTaskProcedure:
			todoServiceAddTaskHandler.ServeHTTP(w, r)
		case TodoServiceCompleteTaskProcedure:
			todoServiceCompleteTaskHandler.ServeHTTP(w, r)
		case TodoServiceListTasksProcedure:
			todoServiceListTasksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTodoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTodoServiceHandler struct{}

func (UnimplementedTodoServiceHandler) AddTask(context.Context, *connect.Request[proto.AddTaskRequest]) (*connect.Response[proto.AddTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.TodoService.AddTask is not implemented"))
}

func (UnimplementedTodoServiceHandler) CompleteTask(context.Context, *connect.Request[proto.CompleteTaskRequest]) (*connect.Response[proto.CompleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.TodoService.CompleteTask is not implemented"))
}

func (UnimplementedTodoServiceHandler) ListTasks(context.Context, *connect.Request[proto.ListTasksRequest]) (*connect.Response[proto.ListTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.TodoService.ListTasks is not implemented"))
}
