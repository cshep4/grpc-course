// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file proto/streaming.proto (package streaming, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * DownloadFileRequest is the request message for downloading a file.
 * It contains the name of the file to be downloaded from the server.
 *
 * @generated from message streaming.DownloadFileRequest
 */
export class DownloadFileRequest extends Message<DownloadFileRequest> {
  /**
   * name is the name of the file to download.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DownloadFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "streaming.DownloadFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadFileRequest {
    return new DownloadFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadFileRequest {
    return new DownloadFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadFileRequest {
    return new DownloadFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadFileRequest | PlainMessage<DownloadFileRequest> | undefined, b: DownloadFileRequest | PlainMessage<DownloadFileRequest> | undefined): boolean {
    return proto3.util.equals(DownloadFileRequest, a, b);
  }
}

/**
 * DownloadFileResponse is the response message for downloading a file.
 * It contains a chunk of the file content.
 *
 * @generated from message streaming.DownloadFileResponse
 */
export class DownloadFileResponse extends Message<DownloadFileResponse> {
  /**
   * content is a chunk of the file content in bytes.
   *
   * @generated from field: bytes content = 1;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<DownloadFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "streaming.DownloadFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadFileResponse {
    return new DownloadFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadFileResponse {
    return new DownloadFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadFileResponse {
    return new DownloadFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadFileResponse | PlainMessage<DownloadFileResponse> | undefined, b: DownloadFileResponse | PlainMessage<DownloadFileResponse> | undefined): boolean {
    return proto3.util.equals(DownloadFileResponse, a, b);
  }
}

/**
 * UploadFileRequest is the request message for uploading a file.
 * It contains a chunk of the file content.
 *
 * @generated from message streaming.UploadFileRequest
 */
export class UploadFileRequest extends Message<UploadFileRequest> {
  /**
   * content is a chunk of the file content in bytes.
   *
   * @generated from field: bytes content = 1;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "streaming.UploadFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadFileRequest {
    return new UploadFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadFileRequest {
    return new UploadFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadFileRequest {
    return new UploadFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadFileRequest | PlainMessage<UploadFileRequest> | undefined, b: UploadFileRequest | PlainMessage<UploadFileRequest> | undefined): boolean {
    return proto3.util.equals(UploadFileRequest, a, b);
  }
}

/**
 * UploadFileResponse is the response message after a file upload is complete.
 * It contains an name that uniquely identifies the uploaded file.
 *
 * @generated from message streaming.UploadFileResponse
 */
export class UploadFileResponse extends Message<UploadFileResponse> {
  /**
   * name is the name for the uploaded file.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<UploadFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "streaming.UploadFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadFileResponse {
    return new UploadFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadFileResponse {
    return new UploadFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadFileResponse {
    return new UploadFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadFileResponse | PlainMessage<UploadFileResponse> | undefined, b: UploadFileResponse | PlainMessage<UploadFileResponse> | undefined): boolean {
    return proto3.util.equals(UploadFileResponse, a, b);
  }
}

