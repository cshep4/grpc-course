// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/grpc-course/module7/internal/chat (interfaces: Store)

// Package store_mock is a generated GoMock package.
package store_mock

import (
	context "context"
	reflect "reflect"

	chat "github.com/cshep4/grpc-course/module7/internal/chat"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// StoreMessage mocks base method.
func (m *MockStore) StoreMessage(arg0 context.Context, arg1 chat.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMessage indicates an expected call of StoreMessage.
func (mr *MockStoreMockRecorder) StoreMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMessage", reflect.TypeOf((*MockStore)(nil).StoreMessage), arg0, arg1)
}
