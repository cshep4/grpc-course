// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshep4/grpc-course/module7/proto (interfaces: ChatService_SubscribeServer)

// Package grpc_mock is a generated GoMock package.
package grpc_mock

import (
	context "context"
	reflect "reflect"

	proto "github.com/cshep4/grpc-course/module7/proto"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockChatService_SubscribeServer is a mock of ChatService_SubscribeServer interface.
type MockChatService_SubscribeServer struct {
	ctrl     *gomock.Controller
	recorder *MockChatService_SubscribeServerMockRecorder
}

// MockChatService_SubscribeServerMockRecorder is the mock recorder for MockChatService_SubscribeServer.
type MockChatService_SubscribeServerMockRecorder struct {
	mock *MockChatService_SubscribeServer
}

// NewMockChatService_SubscribeServer creates a new mock instance.
func NewMockChatService_SubscribeServer(ctrl *gomock.Controller) *MockChatService_SubscribeServer {
	mock := &MockChatService_SubscribeServer{ctrl: ctrl}
	mock.recorder = &MockChatService_SubscribeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService_SubscribeServer) EXPECT() *MockChatService_SubscribeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockChatService_SubscribeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockChatService_SubscribeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockChatService_SubscribeServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockChatService_SubscribeServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockChatService_SubscribeServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockChatService_SubscribeServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockChatService_SubscribeServer) Send(arg0 *proto.SubscribeResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockChatService_SubscribeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockChatService_SubscribeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockChatService_SubscribeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockChatService_SubscribeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockChatService_SubscribeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockChatService_SubscribeServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockChatService_SubscribeServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockChatService_SubscribeServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockChatService_SubscribeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockChatService_SubscribeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockChatService_SubscribeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockChatService_SubscribeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockChatService_SubscribeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockChatService_SubscribeServer)(nil).SetTrailer), arg0)
}
